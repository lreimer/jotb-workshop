// source: beer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.beer.Beer', null, global);
goog.exportSymbol('proto.beer.Beer.BeerType', null, global);
goog.exportSymbol('proto.beer.CreateBeerRequest', null, global);
goog.exportSymbol('proto.beer.DeleteBeerRequest', null, global);
goog.exportSymbol('proto.beer.GetBeerRequest', null, global);
goog.exportSymbol('proto.beer.GetBeerResponse', null, global);
goog.exportSymbol('proto.beer.GetBeersResponse', null, global);
goog.exportSymbol('proto.beer.UpdateBeerRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beer.Beer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beer.Beer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.beer.Beer.displayName = 'proto.beer.Beer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beer.GetBeersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.beer.GetBeersResponse.repeatedFields_, null);
};
goog.inherits(proto.beer.GetBeersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.beer.GetBeersResponse.displayName = 'proto.beer.GetBeersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beer.GetBeerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beer.GetBeerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.beer.GetBeerRequest.displayName = 'proto.beer.GetBeerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beer.GetBeerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beer.GetBeerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.beer.GetBeerResponse.displayName = 'proto.beer.GetBeerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beer.CreateBeerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beer.CreateBeerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.beer.CreateBeerRequest.displayName = 'proto.beer.CreateBeerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beer.UpdateBeerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beer.UpdateBeerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.beer.UpdateBeerRequest.displayName = 'proto.beer.UpdateBeerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beer.DeleteBeerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beer.DeleteBeerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.beer.DeleteBeerRequest.displayName = 'proto.beer.DeleteBeerRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beer.Beer.prototype.toObject = function(opt_includeInstance) {
  return proto.beer.Beer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beer.Beer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.Beer.toObject = function(includeInstance, msg) {
  var f, obj = {
    asin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    brand: jspb.Message.getFieldWithDefault(msg, 3, ""),
    country: jspb.Message.getFieldWithDefault(msg, 4, ""),
    alcohol: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beer.Beer}
 */
proto.beer.Beer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beer.Beer;
  return proto.beer.Beer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beer.Beer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beer.Beer}
 */
proto.beer.Beer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrand(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAlcohol(value);
      break;
    case 6:
      var value = /** @type {!proto.beer.Beer.BeerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beer.Beer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beer.Beer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beer.Beer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.Beer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBrand();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAlcohol();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.beer.Beer.BeerType = {
  INDIANPALEALE: 0,
  SESSIONIPA: 1,
  LAGER: 2
};

/**
 * optional string asin = 1;
 * @return {string}
 */
proto.beer.Beer.prototype.getAsin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.beer.Beer} returns this
 */
proto.beer.Beer.prototype.setAsin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.beer.Beer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.beer.Beer} returns this
 */
proto.beer.Beer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string brand = 3;
 * @return {string}
 */
proto.beer.Beer.prototype.getBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.beer.Beer} returns this
 */
proto.beer.Beer.prototype.setBrand = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string country = 4;
 * @return {string}
 */
proto.beer.Beer.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.beer.Beer} returns this
 */
proto.beer.Beer.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional float alcohol = 5;
 * @return {number}
 */
proto.beer.Beer.prototype.getAlcohol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.beer.Beer} returns this
 */
proto.beer.Beer.prototype.setAlcohol = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional BeerType type = 6;
 * @return {!proto.beer.Beer.BeerType}
 */
proto.beer.Beer.prototype.getType = function() {
  return /** @type {!proto.beer.Beer.BeerType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.beer.Beer.BeerType} value
 * @return {!proto.beer.Beer} returns this
 */
proto.beer.Beer.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.beer.GetBeersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beer.GetBeersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.beer.GetBeersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beer.GetBeersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.GetBeersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    beersList: jspb.Message.toObjectList(msg.getBeersList(),
    proto.beer.Beer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beer.GetBeersResponse}
 */
proto.beer.GetBeersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beer.GetBeersResponse;
  return proto.beer.GetBeersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beer.GetBeersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beer.GetBeersResponse}
 */
proto.beer.GetBeersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beer.Beer;
      reader.readMessage(value,proto.beer.Beer.deserializeBinaryFromReader);
      msg.addBeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beer.GetBeersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beer.GetBeersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beer.GetBeersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.GetBeersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.beer.Beer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Beer beers = 1;
 * @return {!Array<!proto.beer.Beer>}
 */
proto.beer.GetBeersResponse.prototype.getBeersList = function() {
  return /** @type{!Array<!proto.beer.Beer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.beer.Beer, 1));
};


/**
 * @param {!Array<!proto.beer.Beer>} value
 * @return {!proto.beer.GetBeersResponse} returns this
*/
proto.beer.GetBeersResponse.prototype.setBeersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.beer.Beer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.beer.Beer}
 */
proto.beer.GetBeersResponse.prototype.addBeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.beer.Beer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.beer.GetBeersResponse} returns this
 */
proto.beer.GetBeersResponse.prototype.clearBeersList = function() {
  return this.setBeersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beer.GetBeerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beer.GetBeerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beer.GetBeerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.GetBeerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    asin: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beer.GetBeerRequest}
 */
proto.beer.GetBeerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beer.GetBeerRequest;
  return proto.beer.GetBeerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beer.GetBeerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beer.GetBeerRequest}
 */
proto.beer.GetBeerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beer.GetBeerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beer.GetBeerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beer.GetBeerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.GetBeerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string asin = 1;
 * @return {string}
 */
proto.beer.GetBeerRequest.prototype.getAsin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.beer.GetBeerRequest} returns this
 */
proto.beer.GetBeerRequest.prototype.setAsin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beer.GetBeerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.beer.GetBeerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beer.GetBeerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.GetBeerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    beer: (f = msg.getBeer()) && proto.beer.Beer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beer.GetBeerResponse}
 */
proto.beer.GetBeerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beer.GetBeerResponse;
  return proto.beer.GetBeerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beer.GetBeerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beer.GetBeerResponse}
 */
proto.beer.GetBeerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beer.Beer;
      reader.readMessage(value,proto.beer.Beer.deserializeBinaryFromReader);
      msg.setBeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beer.GetBeerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beer.GetBeerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beer.GetBeerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.GetBeerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beer.Beer.serializeBinaryToWriter
    );
  }
};


/**
 * optional Beer beer = 1;
 * @return {?proto.beer.Beer}
 */
proto.beer.GetBeerResponse.prototype.getBeer = function() {
  return /** @type{?proto.beer.Beer} */ (
    jspb.Message.getWrapperField(this, proto.beer.Beer, 1));
};


/**
 * @param {?proto.beer.Beer|undefined} value
 * @return {!proto.beer.GetBeerResponse} returns this
*/
proto.beer.GetBeerResponse.prototype.setBeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.beer.GetBeerResponse} returns this
 */
proto.beer.GetBeerResponse.prototype.clearBeer = function() {
  return this.setBeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.beer.GetBeerResponse.prototype.hasBeer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beer.CreateBeerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beer.CreateBeerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beer.CreateBeerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.CreateBeerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    beer: (f = msg.getBeer()) && proto.beer.Beer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beer.CreateBeerRequest}
 */
proto.beer.CreateBeerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beer.CreateBeerRequest;
  return proto.beer.CreateBeerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beer.CreateBeerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beer.CreateBeerRequest}
 */
proto.beer.CreateBeerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beer.Beer;
      reader.readMessage(value,proto.beer.Beer.deserializeBinaryFromReader);
      msg.setBeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beer.CreateBeerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beer.CreateBeerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beer.CreateBeerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.CreateBeerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beer.Beer.serializeBinaryToWriter
    );
  }
};


/**
 * optional Beer beer = 1;
 * @return {?proto.beer.Beer}
 */
proto.beer.CreateBeerRequest.prototype.getBeer = function() {
  return /** @type{?proto.beer.Beer} */ (
    jspb.Message.getWrapperField(this, proto.beer.Beer, 1));
};


/**
 * @param {?proto.beer.Beer|undefined} value
 * @return {!proto.beer.CreateBeerRequest} returns this
*/
proto.beer.CreateBeerRequest.prototype.setBeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.beer.CreateBeerRequest} returns this
 */
proto.beer.CreateBeerRequest.prototype.clearBeer = function() {
  return this.setBeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.beer.CreateBeerRequest.prototype.hasBeer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beer.UpdateBeerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beer.UpdateBeerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beer.UpdateBeerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.UpdateBeerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    asin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    beer: (f = msg.getBeer()) && proto.beer.Beer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beer.UpdateBeerRequest}
 */
proto.beer.UpdateBeerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beer.UpdateBeerRequest;
  return proto.beer.UpdateBeerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beer.UpdateBeerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beer.UpdateBeerRequest}
 */
proto.beer.UpdateBeerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsin(value);
      break;
    case 2:
      var value = new proto.beer.Beer;
      reader.readMessage(value,proto.beer.Beer.deserializeBinaryFromReader);
      msg.setBeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beer.UpdateBeerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beer.UpdateBeerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beer.UpdateBeerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.UpdateBeerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.beer.Beer.serializeBinaryToWriter
    );
  }
};


/**
 * optional string asin = 1;
 * @return {string}
 */
proto.beer.UpdateBeerRequest.prototype.getAsin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.beer.UpdateBeerRequest} returns this
 */
proto.beer.UpdateBeerRequest.prototype.setAsin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Beer beer = 2;
 * @return {?proto.beer.Beer}
 */
proto.beer.UpdateBeerRequest.prototype.getBeer = function() {
  return /** @type{?proto.beer.Beer} */ (
    jspb.Message.getWrapperField(this, proto.beer.Beer, 2));
};


/**
 * @param {?proto.beer.Beer|undefined} value
 * @return {!proto.beer.UpdateBeerRequest} returns this
*/
proto.beer.UpdateBeerRequest.prototype.setBeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.beer.UpdateBeerRequest} returns this
 */
proto.beer.UpdateBeerRequest.prototype.clearBeer = function() {
  return this.setBeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.beer.UpdateBeerRequest.prototype.hasBeer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beer.DeleteBeerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beer.DeleteBeerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beer.DeleteBeerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.DeleteBeerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    asin: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beer.DeleteBeerRequest}
 */
proto.beer.DeleteBeerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beer.DeleteBeerRequest;
  return proto.beer.DeleteBeerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beer.DeleteBeerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beer.DeleteBeerRequest}
 */
proto.beer.DeleteBeerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beer.DeleteBeerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beer.DeleteBeerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beer.DeleteBeerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beer.DeleteBeerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string asin = 1;
 * @return {string}
 */
proto.beer.DeleteBeerRequest.prototype.getAsin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.beer.DeleteBeerRequest} returns this
 */
proto.beer.DeleteBeerRequest.prototype.setAsin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.beer);
